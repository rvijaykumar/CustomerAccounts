package com.vijay.spark.scoringModel

import com.vijay.spark.accounts.AccountAssessment.{AccountData, CustomerAccountOutput}
import com.vijay.spark.customerAddresses.CustomerAddress.{AddressData, spark}
import org.apache.log4j.{Level, Logger}
import org.apache.spark.sql.{ SparkSession}

object ScoringModel extends App {

  val CountryToLookUp = "British Virgin Islands"

  //Create a spark context, using a local master so Spark runs on the local machine
  val spark = SparkSession.builder().master("local[*]").appName("ScoringModel").getOrCreate()

  //importing spark implicits allows functions such as dataframe.as[T]

  import spark.implicits._

  //Set logger level to Warn
  Logger.getRootLogger.setLevel(Level.WARN)

  case class CustomerDocument(
                               customerId: String,
                               forename: String,
                               surname: String,
                               //Accounts for this customer
                               accounts: Seq[AccountData],
                               //Addresses for this customer
                               address: Seq[AddressData]
                             )

  case class ScoringModel(
                           customerId: String,
                           forename: String,
                           surname: String,
                           //Accounts for this customer
                           accounts: Seq[AccountData],
                           //Addresses for this customer
                           address: Seq[AddressData],
                           linkToBVI: Boolean
                         )

  val customerAddressDS = spark.read.parquet("src/main/resources/customerAddressOutputDS.parquet").as[CustomerDocument]

  val bviDS = customerAddressDS
    .map(row => ScoringModel(
      row.customerId,
      row.forename,
      row.surname,
      row.accounts,
      row.address,
      row.address.exists(a => a.country == Some(CountryToLookUp))))

  bviDS.show(truncate = false)

  val result = bviDS.filter(row => row.linkToBVI == true)
  println(result.count())

  //END GIVEN CODE
}
